spring:
  application:
    name: EmoDiary
  # 개발용 설정
  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: none # 개발 환경에서는 update, 운영 환경에서는 validate 권장
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            # PRD
            redirect-uri: "https://emodiary-client.vercel.app/auth/callback"
            # DEV
            # redirect-uri: "http://localhost:8080/api/login/google"
            scope:
              - email
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID} # REST API 키
            client-secret: ${KAKAO_CLIENT_SECRET} # Client Secret 키
            # PRD
            redirect-uri: "http://emodiary.duckdns.org:8080/api/login/kakao"
            # DEV
            # redirect-uri: http://localhost:8080/api/users/login/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            client-name: Kakao
            scope:
              - profile_nickname
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  redis:
    data:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      database: ${REDIS_DATABASE}
      timeout: ${REDIS_TIMEOUT}
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
    virtual-host: /
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          max-interval: 10000
          multiplier: 2.0

  ai:
    vertex:
      ai:
        gemini:
          project-id: ${VERTEX_PROJECT_ID}
          location: ${VERTEX_LOCATION}
          api-endpoint: ${VERTEX_API_ENDPOINT}
          chat:
            options:
              model: ${GEMINI_MODEL}
          transport: rest
    mcp:
      client:
        enabled: true
        type: SYNC
        stdio:
          connections:
            mongodb-lens:
              command: docker
              args:
                - "run"
                - "--rm"
                - "-i"
                - "--network=host"
                - "furey/mongodb-lens"
                - ${MONGO_DB_URI}

  # 스프링 배치 설정
  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: never
  # 스케줄링 설정
  task:
    scheduling:
      pool:
        size: 5
      thread-name-prefix: scheduled-task-

logging:
  level:
    org.springframework.batch: DEBUG

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    disable-swagger-default-url: true
    config-url: /v3/api-docs/swagger-config
    url: /v3/api-docs
  api-docs:
    path: /v3/api-docs
  packages-to-scan: com.fiveguysburger.emodiary

jwt:
  secret: ${JWT_SECRET}
  expiration: 86400000 # 24시간
  refresh-expiration: 604800000 # 24시간

rabbitmq:
  notification:
    exchange: notification.exchange
    queue: notification.queue
    routing-key: notification.routing.key
